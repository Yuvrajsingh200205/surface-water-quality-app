{"ast":null,"code":"var _jsxFileName = \"/Users/yuvrajsingh/Downloads/Developer/yashhhh/surface-water-quality-app/src/components/DataTable.js\";\nimport React from 'react';\n\n// DataTable component: Renders the fetched data in a table\n// Dynamically generates columns based on the first data item's keys\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataTable({\n  data\n}) {\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get column names from the first record's keys (assuming all records have same structure)\n  const columns = Object.keys(data[0]);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: columns.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: col.replace(/_/g, ' ').toUpperCase()\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this) // Format column names nicely\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: columns.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item[col] !== undefined ? item[col] : 'N/A'\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this) // Handle missing values\n        )\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = DataTable;\nexport default DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DataTable","data","length","children","fileName","_jsxFileName","lineNumber","columnNumber","columns","Object","keys","map","col","replace","toUpperCase","item","index","undefined","_c","$RefreshReg$"],"sources":["/Users/yuvrajsingh/Downloads/Developer/yashhhh/surface-water-quality-app/src/components/DataTable.js"],"sourcesContent":["import React from 'react';\n\n// DataTable component: Renders the fetched data in a table\n// Dynamically generates columns based on the first data item's keys\nfunction DataTable({ data }) {\n  if (data.length === 0) {\n    return <p>No data available.</p>;\n  }\n\n  // Get column names from the first record's keys (assuming all records have same structure)\n  const columns = Object.keys(data[0]);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          {columns.map((col) => (\n            <th key={col}>{col.replace(/_/g, ' ').toUpperCase()}</th> // Format column names nicely\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item, index) => (\n          <tr key={index}>\n            {columns.map((col) => (\n              <td key={col}>{item[col] !== undefined ? item[col] : 'N/A'}</td> // Handle missing values\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default DataTable;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,SAASA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAC3B,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IACrB,oBAAOH,OAAA;MAAAI,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAClC;;EAEA;EACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;EAEpC,oBACEF,OAAA;IAAAI,QAAA,gBACEJ,OAAA;MAAAI,QAAA,eACEJ,OAAA;QAAAI,QAAA,EACGK,OAAO,CAACG,GAAG,CAAEC,GAAG,iBACfb,OAAA;UAAAI,QAAA,EAAeS,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC;QAAC,GAA1CF,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA4C,CAAC,CAAC;QAC3D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACRR,OAAA;MAAAI,QAAA,EACGF,IAAI,CAACU,GAAG,CAAC,CAACI,IAAI,EAAEC,KAAK,kBACpBjB,OAAA;QAAAI,QAAA,EACGK,OAAO,CAACG,GAAG,CAAEC,GAAG,iBACfb,OAAA;UAAAI,QAAA,EAAeY,IAAI,CAACH,GAAG,CAAC,KAAKK,SAAS,GAAGF,IAAI,CAACH,GAAG,CAAC,GAAG;QAAK,GAAjDA,GAAG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmD,CAAC,CAAC;QAClE;MAAC,GAHKS,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ;AAACW,EAAA,GA5BQlB,SAAS;AA8BlB,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}